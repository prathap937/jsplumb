import { Connection } from "../connector/connection-impl";
import { EndpointRepresentation } from './endpoints';
import { JsPlumbInstance } from '../core';
import { Component } from "../component/component";
import { InternalEndpointOptions } from "./endpoint-options";
import { LightweightAnchor } from '../factory/anchor-record-factory';
import { PaintStyle, OverlaySpec, ConnectorSpec } from "@jsplumb/common";
export interface Endpoint extends Component {
    connections: Array<Connection>;
    representation: EndpointRepresentation<any>;
    proxiedBy: Endpoint;
    connectorClass: string;
    connectorHoverClass: string;
    element: any;
    elementId: string;
    dragAllowedWhenFull: boolean;
    timestamp: string;
    portId: string;
    maxConnections: number;
    enabled: boolean;
    isSource: boolean;
    isTarget: boolean;
    isTemporarySource: boolean;
    connectionCost: number;
    connectionsDirected: boolean;
    connectionsDetachable: boolean;
    reattachConnections: boolean;
    edgeType: string;
    currentAnchorClass: string;
    connector: ConnectorSpec;
    connectorOverlays: Array<OverlaySpec>;
    connectorStyle: PaintStyle;
    connectorHoverStyle: PaintStyle;
    deleteOnEmpty: boolean;
    uuid: string;
    scope: string;
    _anchor: LightweightAnchor;
    referenceEndpoint: Endpoint;
    finalEndpoint: Endpoint;
    connectorSelector: () => Connection;
}
export declare const ID_PREFIX_ENDPOINT = "_jsplumb_e";
export declare const DEFAULT_OVERLAY_KEY_ENDPOINTS = "endpointOverlays";
export declare const DEFAULT_LABEL_LOCATION_ENDPOINT: [number, number];
export declare function createEndpoint<E>(instance: JsPlumbInstance, params: InternalEndpointOptions<E>): Endpoint;
//# sourceMappingURL=endpoint.d.ts.map